/* fax JS v0.1.0 | (c) 2022 by Aldrin Caballero */

//Element Selector
const $ = (element) => {
  var el = document.querySelectorAll(element);
  return (el.length > 1) ? el : document.querySelector(element);
}

const fax = new Object({
  get : async (url, ...args) => {
    const xhr = new XMLHttpRequest();
    var headers, status, statusText;
    var args = args[0], url = url;
    if(args != undefined && typeof args == 'object') {
      if(url.split('').reverse()[0] != '?') {
        url += '?';
      }
      for(var i = 0; i < Object.keys(args.params).length; i++) {
          url += Object.keys(args.params)[i];
          url += '=';
          url += args.params[Object.keys(args.params)[i]];
          url += '&';
        }
        
        url = url.split('');
        url.pop();
        url = url.join('');
    }
    const data = await new Promise((resolve, reject) => {
      xhr.open('GET', url, true);
      xhr.onload = () => {
        resolve(xhr.response);
        //Headers response function
       const loadHeaders = () => {
          var headers = xhr.getAllResponseHeaders();
          var arr = headers.trim().split(/[\r\n]+/);
          var headerMap = {};
          arr.forEach(line => {
            var parts = line.split(': ');
               var header = parts.shift();
               var value = parts.join(': ');
               headerMap[header] = value;
          });
          return headerMap;
       }


       //Status Response Function
       const statusResponse = async () => {
             status = xhr.status;
             statusText = xhr.statusText;
       }
       headers = loadHeaders();
       statusResponse();
      };
      xhr.onerror = () => {
        reject('An error occurred during XHR request.');
      }
      xhr.send(null);
    })
    var res = {
      data : data,
      status : status,
      statusText : statusText,
      'request-type' : 'XMLHttpRequest',
      headers : headers
    };
    
    var pairs = Object.entries(res);
    for(const [key, val] of pairs) {
      Object.defineProperty(res, key, {
        enumerable: false,
        writable: false
      })
    }
    return await Object.freeze(res);
  },
  
  
  
  post : async (url, ...args) => {
    const xhr = new XMLHttpRequest();
    var headers, status, statusText;
    var args = args[0], url = url;
    const data = await new Promise((resolve, reject) => {
      xhr.open('POST', url, true);
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.onload = () => {
        resolve(xhr.response);
        //Headers response function
       const loadHeaders = () => {
          var headers = xhr.getAllResponseHeaders();
          var arr = headers.trim().split(/[\r\n]+/);
          var headerMap = {};
          arr.forEach(line => {
            var parts = line.split(': ');
               var header = parts.shift();
               var value = parts.join(': ');
               headerMap[header] = value;
          });
          return headerMap;
       }


       //Status Response Function
       const statusResponse = async () => {
             status = xhr.status;
             statusText = xhr.statusText;
       }
       headers = loadHeaders();
       statusResponse();
      };
      xhr.onerror = () => {
        reject('An error occurred during XHR request.');
      }
      xhr.send(JSON.stringify(args));
    })
    var res = {
      data : data,
      status : status,
      statusText : statusText,
      'request-type' : 'XMLHttpRequest',
      headers : headers
    };
    
    var pairs = Object.entries(res);
    for(const [key, val] of pairs) {
      Object.defineProperty(res, key, {
        enumerable: false,
        writable: false
      })
    }
    return await Object.freeze(res);
  },
});


const Fax = async (config) => {
  const param = config;
  var headers, status, statusText;
  var url = param.url;
  if(typeof param == 'object') {
  const xhr = new XMLHttpRequest();
    
    const data = await new Promise((resolve, reject) => {
      xhr.open(param.method, url, true);
      xhr.onload = () => {
        resolve(xhr.response);
        //Headers response function
       const loadHeaders = () => {
          var headers = xhr.getAllResponseHeaders();
          var arr = headers.trim().split(/[\r\n]+/);
          var headerMap = {};
          arr.forEach(line => {
            var parts = line.split(': ');
               var header = parts.shift();
               var value = parts.join(': ');
               headerMap[header] = value;
          });
          return headerMap;
       }


       //Status Response Function
       const statusResponse = async () => {
             status = xhr.status;
             statusText = xhr.statusText;
       }
       headers = loadHeaders();
       statusResponse();
      };
      xhr.onerror = () => {
        reject('An error occurred during XHR request.');
      }
      if(param.data == '[object FormData]') {
        var obj = {};
        for(var pair of param.data.entries()) {
         obj[pair[0]] = pair[1];
        }
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(obj));
      } else if(param.data == '[object Object]') {
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(param.data));
      } else if(param.data == '[object HTMLFormElement]') {
        var form = new FormData(param.data);
        var obj = {};
        for(var pair of form.entries()) {
         obj[pair[0]] = pair[1];
        }
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(JSON.stringify(obj));
      }
    })
    var res = {
      data: data,
      status: status,
      statusText: statusText,
      'request-type': 'XMLHttpRequest',
      headers: headers
    };
    
    var pairs = Object.entries(res);
    for (const [key, val] of pairs) {
      Object.defineProperty(res, key, {
        enumerable: false,
        writable: false
      })
    }
    return await Object.freeze(res);
    
  } else if(typeof param == 'string') {
    return await fax.get(param);
    } else {
    throw new Error('Invalid configuration at Fax(config)');
  }
}
